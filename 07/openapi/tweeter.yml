openapi: 3.0.0
info:
  title: Tweeter API
  version: '1.0'
  description: TweeterのAPIです。
  license:
    name: Apache 2.0
servers:
- url: 'http://localhost:8080'
paths:
  '/tweeters/{username}/tweets':
    parameters:
    - schema:
        type: string
      name: username
      in: path
      required: true
      description: ユーザー名
    get:
      summary: 指定ユーザーのつぶやき取得
      tags:
      - Tweet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TweetOutput'
              examples: {}
      operationId: get-tweeters-username-tweets
      description: 指定したユーザーのつぶやきを取得します。
  '/tweeters/{username}/followers':
    parameters:
    - schema:
        type: string
      name: username
      in: path
      required: true
      description: ユーザー名
    get:
      summary: 指定ユーザーのフォロワー取得
      tags:
      - Following
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowingOutput'
              examples: {}
      operationId: get-tweeters-username-followers
      description: 指定したユーザーをフォローしているユーザーを取得します。
  '/tweeters/{username}/followings':
    get:
      summary: 指定ユーザーのフォローイング取得
      tags:
      - Following
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowingOutput'
      operationId: get-tweeters-username-followings
      description: 指定したユーザーがフォローしているユーザー一覧を取得します。
    parameters:
    - schema:
        type: string
      name: username
      in: path
      required: true
      description: ユーザー名
  '/tweets/{uuid}':
    get:
      summary: 指定つぶやき一件取得
      tags:
      - Tweet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetOutput'
      operationId: get-tweets-uuid
      description: 指定したUUIDのつぶやきを取得します。
    parameters:
    - schema:
        type: string
      name: uuid
      in: path
      required: true
      description: UUID
    delete:
      summary: 指定つぶやき一件削除
      operationId: delete-tweets-uuid
      responses:
        '204':
          description: No Content
      description: 指定したUUIDのつぶやきを削除します。
      tags:
      - Tweet
  /tweets:
    post:
      summary: 自分のつぶやき作成
      operationId: post-tweets
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: 作成されたつぶやきのURL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetOutput'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TweetInput'
            examples:
              Sample:
                value:
                  text: Hello
        description: つぶやき情報
      description: 自分のつぶやきを作成します。
      tags:
      - Tweet
      parameters: []
    get:
      summary: 自分とフォロワーのつぶやき一覧
      operationId: get-tweets
      description: 自分とフォローしているユーザーのつぶやき一覧を取得します。
      tags:
      - Tweet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TweetOutput'
      parameters: []
  /followings:
    get:
      summary: 自分がフォローしているユーザー一覧取得
      tags:
      - Following
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Followings'
      operationId: get-followings
      description: 自分がフォローしているユーザー一覧を取得します。
    post:
      summary: ユーザーのフォロー
      operationId: post-followings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingOutput'
      description: ユーザーをフォローします。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowingInput'
            examples:
              Sample:
                value:
                  username: foo
        description: フォローするユーザー情報
      tags:
      - Following
  /tweeters:
    post:
      summary: ユーザー作成
      operationId: post-tweeters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweeterOutput'
      description: ユーザーを作成します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TweeterInput'
            examples:
              Sample:
                value:
                  username: demo
                  email: demo@example.com
                  password: secret
        description: ユーザー情報
      tags:
      - Tweeter
components:
  schemas:
    TweetOutput:
      title: TweetOutput
      type: object
      x-examples:
        Sample:
          uuid: d188c790-8c28-4507-b8cd-e422d6073a93
          text: 'Hello World!'
          username: making
          createdAt: '2020-05-06T05:38:55.297765Z'
      description: つぶやき(出力用)
      properties:
        uuid:
          type: string
          description: UUID
          format: uuid
        text:
          type: string
          description: |
            つぶやきテキスト
        username:
          type: string
          description: ユーザー名
        createdAt:
          type: string
          description: 作成時刻
          format: date-time
      required:
      - uuid
      - text
      - username
      - createdAt
    TweeterOutput:
      title: TweeterOutput
      type: object
      x-examples:
        Sample:
          username: making
      description: ユーザー(出力用)
      properties:
        username:
          type: string
          description: ユーザー名
      required:
      - username
    TweeterInput:
      title: TweeterInput
      type: object
      x-examples:
        Sample:
          username: making
          email: making@example.com
          password: secret
      description: ユーザー(入力用)
      properties:
        username:
          type: string
          description: ユーザー名
          minLength: 3
          maxLength: 36
          pattern: '[a-zA-Z0-9]'
        email:
          type: string
          description: メールアドレス
          format: email
          minLength: 5
          maxLength: 128
        password:
          type: string
          description: パスワード
          format: password
          minLength: 8
      required:
      - username
      - email
      - password
    TweetInput:
      title: TweetInput
      type: object
      description: つぶやき(入力用)
      x-examples:
        Example:
          text: 'Hello World!'
      properties:
        text:
          type: string
          description: |
            つぶやきテキスト
          minLength: 1
          maxLength: 128
      required:
      - text
    FollowingOutput:
      title: Following
      type: object
      description: フォロー情報(出力用)
      x-tags:
      - Following
      properties:
        username:
          type: string
      required:
      - username
      x-examples:
        Sample:
          username: demo
    FollowingInput:
      title: FollowingInput
      type: object
      description: フォロー情報(入力用)
      properties:
        username:
          type: string
      required:
      - username
      x-examples:
        Sample:
          username: demo
